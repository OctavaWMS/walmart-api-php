<?php

/**
 * LabelsDetailByPurchaseOrderId200ResponseDataInnerAddOnsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Ship With Walmart
 *
 * This class is auto-generated by the OpenAPI generator v7.12.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\CP\US\Feeds;

use Walmart\Models\BaseModel;

/**
 * LabelsDetailByPurchaseOrderId200ResponseDataInnerAddOnsInner Class Doc Comment
 *
 * @category Class

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class LabelsDetailByPurchaseOrderId200ResponseDataInnerAddOnsInner extends BaseModel
{public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'labelsDetailByPurchaseOrderId_200_response_data_inner_addOns_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'charge' => '\Walmart\Models\CP\US\Feeds\LabelsDetailByPurchaseOrderId200ResponseDataInnerAddOnsInnerCharge',
        'declaredValue' => '\Walmart\Models\CP\US\Feeds\LabelsDetailByPurchaseOrderId200ResponseDataInnerAddOnsInnerDeclaredValue',
        'name' => 'string',
        'refLink' => 'string',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'charge' => null,
        'declaredValue' => null,
        'name' => null,
        'refLink' => null,
        'status' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'charge' => false,
		'declaredValue' => false,
		'name' => false,
		'refLink' => false,
		'status' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'charge' => 'charge',
        'declaredValue' => 'declaredValue',
        'name' => 'name',
        'refLink' => 'refLink',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'charge' => 'setCharge',
        'declaredValue' => 'setDeclaredValue',
        'name' => 'setName',
        'refLink' => 'setRefLink',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'charge' => 'getCharge',
        'declaredValue' => 'getDeclaredValue',
        'name' => 'getName',
        'refLink' => 'getRefLink',
        'status' => 'getStatus'
    ];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('charge', $data ?? [], null);
        $this->setIfExists('declaredValue', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('refLink', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        
        return $invalidProperties;
    }

    /**
     * Gets charge
     *
     * @return \Walmart\Models\CP\US\Feeds\LabelsDetailByPurchaseOrderId200ResponseDataInnerAddOnsInnerCharge|null
    
     */
    public function getCharge()
    {
        return $this->container['charge'];
    }

    /**
     * Sets charge
     *
     * @param \Walmart\Models\CP\US\Feeds\LabelsDetailByPurchaseOrderId200ResponseDataInnerAddOnsInnerCharge|null $charge charge
     *
     * @return self
    
     */
    public function setCharge($charge)
    {
        if (is_null($charge)) {
            throw new \InvalidArgumentException('non-nullable charge cannot be null');
        }
        
        $this->container['charge'] = $charge;
        return $this;
    }

    /**
     * Gets declaredValue
     *
     * @return \Walmart\Models\CP\US\Feeds\LabelsDetailByPurchaseOrderId200ResponseDataInnerAddOnsInnerDeclaredValue|null
    
     */
    public function getDeclaredValue()
    {
        return $this->container['declaredValue'];
    }

    /**
     * Sets declaredValue
     *
     * @param \Walmart\Models\CP\US\Feeds\LabelsDetailByPurchaseOrderId200ResponseDataInnerAddOnsInnerDeclaredValue|null $declaredValue declaredValue
     *
     * @return self
    
     */
    public function setDeclaredValue($declaredValue)
    {
        if (is_null($declaredValue)) {
            throw new \InvalidArgumentException('non-nullable declaredValue cannot be null');
        }
        
        $this->container['declaredValue'] = $declaredValue;
        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
    
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
    
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        
        $this->container['name'] = $name;
        return $this;
    }

    /**
     * Gets refLink
     *
     * @return string|null
    
     */
    public function getRefLink()
    {
        return $this->container['refLink'];
    }

    /**
     * Sets refLink
     *
     * @param string|null $refLink refLink
     *
     * @return self
    
     */
    public function setRefLink($refLink)
    {
        if (is_null($refLink)) {
            throw new \InvalidArgumentException('non-nullable refLink cannot be null');
        }
        
        $this->container['refLink'] = $refLink;
        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
    
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
    
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        
        $this->container['status'] = $status;
        return $this;
    }
}
