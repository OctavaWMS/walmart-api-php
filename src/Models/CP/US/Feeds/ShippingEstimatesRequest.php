<?php

/**
 * ShippingEstimatesRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Ship With Walmart
 *
 * This class is auto-generated by the OpenAPI generator v7.12.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\CP\US\Feeds;

use Walmart\Models\BaseModel;

/**
 * ShippingEstimatesRequest Class Doc Comment
 *
 * @category Class

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class ShippingEstimatesRequest extends BaseModel
{public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'shippingEstimates_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'addOns' => 'string',
        'boxDimensions' => '\Walmart\Models\CP\US\Feeds\ShippingEstimatesRequestBoxDimensions',
        'boxItems' => '\Walmart\Models\CP\US\Feeds\ShippingEstimatesRequestBoxItemsInner[]',
        'carriers' => 'string[]',
        'deliverByDate' => 'string',
        'fromAddress' => '\Walmart\Models\CP\US\Feeds\ShippingEstimatesRequestFromAddress',
        'hasBattery' => 'string',
        'includeServicesNotMeetingDeliveryPromise' => 'string',
        'packageType' => 'string',
        'purchaseOrderId' => 'string',
        'shipByDate' => 'string',
        'toAddress' => '\Walmart\Models\CP\US\Feeds\ShippingEstimatesRequestFromAddress'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'addOns' => null,
        'boxDimensions' => null,
        'boxItems' => null,
        'carriers' => null,
        'deliverByDate' => null,
        'fromAddress' => null,
        'hasBattery' => null,
        'includeServicesNotMeetingDeliveryPromise' => null,
        'packageType' => null,
        'purchaseOrderId' => null,
        'shipByDate' => null,
        'toAddress' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'addOns' => false,
		'boxDimensions' => false,
		'boxItems' => false,
		'carriers' => false,
		'deliverByDate' => false,
		'fromAddress' => false,
		'hasBattery' => false,
		'includeServicesNotMeetingDeliveryPromise' => false,
		'packageType' => false,
		'purchaseOrderId' => false,
		'shipByDate' => false,
		'toAddress' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'addOns' => 'addOns',
        'boxDimensions' => 'boxDimensions',
        'boxItems' => 'boxItems',
        'carriers' => 'carriers',
        'deliverByDate' => 'deliverByDate',
        'fromAddress' => 'fromAddress',
        'hasBattery' => 'hasBattery',
        'includeServicesNotMeetingDeliveryPromise' => 'includeServicesNotMeetingDeliveryPromise',
        'packageType' => 'packageType',
        'purchaseOrderId' => 'purchaseOrderId',
        'shipByDate' => 'shipByDate',
        'toAddress' => 'toAddress'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'addOns' => 'setAddOns',
        'boxDimensions' => 'setBoxDimensions',
        'boxItems' => 'setBoxItems',
        'carriers' => 'setCarriers',
        'deliverByDate' => 'setDeliverByDate',
        'fromAddress' => 'setFromAddress',
        'hasBattery' => 'setHasBattery',
        'includeServicesNotMeetingDeliveryPromise' => 'setIncludeServicesNotMeetingDeliveryPromise',
        'packageType' => 'setPackageType',
        'purchaseOrderId' => 'setPurchaseOrderId',
        'shipByDate' => 'setShipByDate',
        'toAddress' => 'setToAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'addOns' => 'getAddOns',
        'boxDimensions' => 'getBoxDimensions',
        'boxItems' => 'getBoxItems',
        'carriers' => 'getCarriers',
        'deliverByDate' => 'getDeliverByDate',
        'fromAddress' => 'getFromAddress',
        'hasBattery' => 'getHasBattery',
        'includeServicesNotMeetingDeliveryPromise' => 'getIncludeServicesNotMeetingDeliveryPromise',
        'packageType' => 'getPackageType',
        'purchaseOrderId' => 'getPurchaseOrderId',
        'shipByDate' => 'getShipByDate',
        'toAddress' => 'getToAddress'
    ];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('addOns', $data ?? [], null);
        $this->setIfExists('boxDimensions', $data ?? [], null);
        $this->setIfExists('boxItems', $data ?? [], null);
        $this->setIfExists('carriers', $data ?? [], null);
        $this->setIfExists('deliverByDate', $data ?? [], null);
        $this->setIfExists('fromAddress', $data ?? [], null);
        $this->setIfExists('hasBattery', $data ?? [], null);
        $this->setIfExists('includeServicesNotMeetingDeliveryPromise', $data ?? [], null);
        $this->setIfExists('packageType', $data ?? [], null);
        $this->setIfExists('purchaseOrderId', $data ?? [], null);
        $this->setIfExists('shipByDate', $data ?? [], null);
        $this->setIfExists('toAddress', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        
        return $invalidProperties;
    }

    /**
     * Gets addOns
     *
     * @return string|null
    
     */
    public function getAddOns()
    {
        return $this->container['addOns'];
    }

    /**
     * Sets addOns
     *
     * @param string|null $addOns addOns
     *
     * @return self
    
     */
    public function setAddOns($addOns)
    {
        if (is_null($addOns)) {
            throw new \InvalidArgumentException('non-nullable addOns cannot be null');
        }
        
        $this->container['addOns'] = $addOns;
        return $this;
    }

    /**
     * Gets boxDimensions
     *
     * @return \Walmart\Models\CP\US\Feeds\ShippingEstimatesRequestBoxDimensions|null
    
     */
    public function getBoxDimensions()
    {
        return $this->container['boxDimensions'];
    }

    /**
     * Sets boxDimensions
     *
     * @param \Walmart\Models\CP\US\Feeds\ShippingEstimatesRequestBoxDimensions|null $boxDimensions boxDimensions
     *
     * @return self
    
     */
    public function setBoxDimensions($boxDimensions)
    {
        if (is_null($boxDimensions)) {
            throw new \InvalidArgumentException('non-nullable boxDimensions cannot be null');
        }
        
        $this->container['boxDimensions'] = $boxDimensions;
        return $this;
    }

    /**
     * Gets boxItems
     *
     * @return \Walmart\Models\CP\US\Feeds\ShippingEstimatesRequestBoxItemsInner[]|null
    
     */
    public function getBoxItems()
    {
        return $this->container['boxItems'];
    }

    /**
     * Sets boxItems
     *
     * @param \Walmart\Models\CP\US\Feeds\ShippingEstimatesRequestBoxItemsInner[]|null $boxItems boxItems
     *
     * @return self
    
     */
    public function setBoxItems($boxItems)
    {
        if (is_null($boxItems)) {
            throw new \InvalidArgumentException('non-nullable boxItems cannot be null');
        }
        
        $this->container['boxItems'] = $boxItems;
        return $this;
    }

    /**
     * Gets carriers
     *
     * @return string[]|null
    
     */
    public function getCarriers()
    {
        return $this->container['carriers'];
    }

    /**
     * Sets carriers
     *
     * @param string[]|null $carriers carriers
     *
     * @return self
    
     */
    public function setCarriers($carriers)
    {
        if (is_null($carriers)) {
            throw new \InvalidArgumentException('non-nullable carriers cannot be null');
        }
        
        $this->container['carriers'] = $carriers;
        return $this;
    }

    /**
     * Gets deliverByDate
     *
     * @return string|null
    
     */
    public function getDeliverByDate()
    {
        return $this->container['deliverByDate'];
    }

    /**
     * Sets deliverByDate
     *
     * @param string|null $deliverByDate deliverByDate
     *
     * @return self
    
     */
    public function setDeliverByDate($deliverByDate)
    {
        if (is_null($deliverByDate)) {
            throw new \InvalidArgumentException('non-nullable deliverByDate cannot be null');
        }
        
        $this->container['deliverByDate'] = $deliverByDate;
        return $this;
    }

    /**
     * Gets fromAddress
     *
     * @return \Walmart\Models\CP\US\Feeds\ShippingEstimatesRequestFromAddress|null
    
     */
    public function getFromAddress()
    {
        return $this->container['fromAddress'];
    }

    /**
     * Sets fromAddress
     *
     * @param \Walmart\Models\CP\US\Feeds\ShippingEstimatesRequestFromAddress|null $fromAddress fromAddress
     *
     * @return self
    
     */
    public function setFromAddress($fromAddress)
    {
        if (is_null($fromAddress)) {
            throw new \InvalidArgumentException('non-nullable fromAddress cannot be null');
        }
        
        $this->container['fromAddress'] = $fromAddress;
        return $this;
    }

    /**
     * Gets hasBattery
     *
     * @return string|null
    
     */
    public function getHasBattery()
    {
        return $this->container['hasBattery'];
    }

    /**
     * Sets hasBattery
     *
     * @param string|null $hasBattery hasBattery
     *
     * @return self
    
     */
    public function setHasBattery($hasBattery)
    {
        if (is_null($hasBattery)) {
            throw new \InvalidArgumentException('non-nullable hasBattery cannot be null');
        }
        
        $this->container['hasBattery'] = $hasBattery;
        return $this;
    }

    /**
     * Gets includeServicesNotMeetingDeliveryPromise
     *
     * @return string|null
    
     */
    public function getIncludeServicesNotMeetingDeliveryPromise()
    {
        return $this->container['includeServicesNotMeetingDeliveryPromise'];
    }

    /**
     * Sets includeServicesNotMeetingDeliveryPromise
     *
     * @param string|null $includeServicesNotMeetingDeliveryPromise includeServicesNotMeetingDeliveryPromise
     *
     * @return self
    
     */
    public function setIncludeServicesNotMeetingDeliveryPromise($includeServicesNotMeetingDeliveryPromise)
    {
        if (is_null($includeServicesNotMeetingDeliveryPromise)) {
            throw new \InvalidArgumentException('non-nullable includeServicesNotMeetingDeliveryPromise cannot be null');
        }
        
        $this->container['includeServicesNotMeetingDeliveryPromise'] = $includeServicesNotMeetingDeliveryPromise;
        return $this;
    }

    /**
     * Gets packageType
     *
     * @return string|null
    
     */
    public function getPackageType()
    {
        return $this->container['packageType'];
    }

    /**
     * Sets packageType
     *
     * @param string|null $packageType packageType
     *
     * @return self
    
     */
    public function setPackageType($packageType)
    {
        if (is_null($packageType)) {
            throw new \InvalidArgumentException('non-nullable packageType cannot be null');
        }
        
        $this->container['packageType'] = $packageType;
        return $this;
    }

    /**
     * Gets purchaseOrderId
     *
     * @return string|null
    
     */
    public function getPurchaseOrderId()
    {
        return $this->container['purchaseOrderId'];
    }

    /**
     * Sets purchaseOrderId
     *
     * @param string|null $purchaseOrderId purchaseOrderId
     *
     * @return self
    
     */
    public function setPurchaseOrderId($purchaseOrderId)
    {
        if (is_null($purchaseOrderId)) {
            throw new \InvalidArgumentException('non-nullable purchaseOrderId cannot be null');
        }
        
        $this->container['purchaseOrderId'] = $purchaseOrderId;
        return $this;
    }

    /**
     * Gets shipByDate
     *
     * @return string|null
    
     */
    public function getShipByDate()
    {
        return $this->container['shipByDate'];
    }

    /**
     * Sets shipByDate
     *
     * @param string|null $shipByDate shipByDate
     *
     * @return self
    
     */
    public function setShipByDate($shipByDate)
    {
        if (is_null($shipByDate)) {
            throw new \InvalidArgumentException('non-nullable shipByDate cannot be null');
        }
        
        $this->container['shipByDate'] = $shipByDate;
        return $this;
    }

    /**
     * Gets toAddress
     *
     * @return \Walmart\Models\CP\US\Feeds\ShippingEstimatesRequestFromAddress|null
    
     */
    public function getToAddress()
    {
        return $this->container['toAddress'];
    }

    /**
     * Sets toAddress
     *
     * @param \Walmart\Models\CP\US\Feeds\ShippingEstimatesRequestFromAddress|null $toAddress toAddress
     *
     * @return self
    
     */
    public function setToAddress($toAddress)
    {
        if (is_null($toAddress)) {
            throw new \InvalidArgumentException('non-nullable toAddress cannot be null');
        }
        
        $this->container['toAddress'] = $toAddress;
        return $this;
    }
}
