<?php

/**
 * SupportedCarrierPackageTypes200ResponseDataInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Ship With Walmart
 *
 * This class is auto-generated by the OpenAPI generator v7.12.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\MP\US\Shipping;

use Walmart\Models\BaseModel;

/**
 * SupportedCarrierPackageTypes200ResponseDataInner Class Doc Comment
 *
 * @category Class

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class SupportedCarrierPackageTypes200ResponseDataInner extends BaseModel
{public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'supportedCarrierPackageTypes_200_response_data_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'dimensionUnit' => 'string',
        'height' => 'string',
        'id' => 'string',
        'length' => 'string',
        'packageTypeDisplayName' => 'string',
        'packageTypeShortName' => 'string',
        'width' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'dimensionUnit' => null,
        'height' => null,
        'id' => null,
        'length' => null,
        'packageTypeDisplayName' => null,
        'packageTypeShortName' => null,
        'width' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'dimensionUnit' => false,
		'height' => false,
		'id' => false,
		'length' => false,
		'packageTypeDisplayName' => false,
		'packageTypeShortName' => false,
		'width' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'dimensionUnit' => 'dimensionUnit',
        'height' => 'height',
        'id' => 'id',
        'length' => 'length',
        'packageTypeDisplayName' => 'packageTypeDisplayName',
        'packageTypeShortName' => 'packageTypeShortName',
        'width' => 'width'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'dimensionUnit' => 'setDimensionUnit',
        'height' => 'setHeight',
        'id' => 'setId',
        'length' => 'setLength',
        'packageTypeDisplayName' => 'setPackageTypeDisplayName',
        'packageTypeShortName' => 'setPackageTypeShortName',
        'width' => 'setWidth'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'dimensionUnit' => 'getDimensionUnit',
        'height' => 'getHeight',
        'id' => 'getId',
        'length' => 'getLength',
        'packageTypeDisplayName' => 'getPackageTypeDisplayName',
        'packageTypeShortName' => 'getPackageTypeShortName',
        'width' => 'getWidth'
    ];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('dimensionUnit', $data ?? [], null);
        $this->setIfExists('height', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('length', $data ?? [], null);
        $this->setIfExists('packageTypeDisplayName', $data ?? [], null);
        $this->setIfExists('packageTypeShortName', $data ?? [], null);
        $this->setIfExists('width', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        
        return $invalidProperties;
    }

    /**
     * Gets dimensionUnit
     *
     * @return string|null
    
     */
    public function getDimensionUnit()
    {
        return $this->container['dimensionUnit'];
    }

    /**
     * Sets dimensionUnit
     *
     * @param string|null $dimensionUnit dimensionUnit
     *
     * @return self
    
     */
    public function setDimensionUnit($dimensionUnit)
    {
        if (is_null($dimensionUnit)) {
            throw new \InvalidArgumentException('non-nullable dimensionUnit cannot be null');
        }
        
        $this->container['dimensionUnit'] = $dimensionUnit;
        return $this;
    }

    /**
     * Gets height
     *
     * @return string|null
    
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param string|null $height height
     *
     * @return self
    
     */
    public function setHeight($height)
    {
        if (is_null($height)) {
            throw new \InvalidArgumentException('non-nullable height cannot be null');
        }
        
        $this->container['height'] = $height;
        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
    
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
    
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        
        $this->container['id'] = $id;
        return $this;
    }

    /**
     * Gets length
     *
     * @return string|null
    
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param string|null $length length
     *
     * @return self
    
     */
    public function setLength($length)
    {
        if (is_null($length)) {
            throw new \InvalidArgumentException('non-nullable length cannot be null');
        }
        
        $this->container['length'] = $length;
        return $this;
    }

    /**
     * Gets packageTypeDisplayName
     *
     * @return string|null
    
     */
    public function getPackageTypeDisplayName()
    {
        return $this->container['packageTypeDisplayName'];
    }

    /**
     * Sets packageTypeDisplayName
     *
     * @param string|null $packageTypeDisplayName packageTypeDisplayName
     *
     * @return self
    
     */
    public function setPackageTypeDisplayName($packageTypeDisplayName)
    {
        if (is_null($packageTypeDisplayName)) {
            throw new \InvalidArgumentException('non-nullable packageTypeDisplayName cannot be null');
        }
        
        $this->container['packageTypeDisplayName'] = $packageTypeDisplayName;
        return $this;
    }

    /**
     * Gets packageTypeShortName
     *
     * @return string|null
    
     */
    public function getPackageTypeShortName()
    {
        return $this->container['packageTypeShortName'];
    }

    /**
     * Sets packageTypeShortName
     *
     * @param string|null $packageTypeShortName packageTypeShortName
     *
     * @return self
    
     */
    public function setPackageTypeShortName($packageTypeShortName)
    {
        if (is_null($packageTypeShortName)) {
            throw new \InvalidArgumentException('non-nullable packageTypeShortName cannot be null');
        }
        
        $this->container['packageTypeShortName'] = $packageTypeShortName;
        return $this;
    }

    /**
     * Gets width
     *
     * @return string|null
    
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param string|null $width width
     *
     * @return self
    
     */
    public function setWidth($width)
    {
        if (is_null($width)) {
            throw new \InvalidArgumentException('non-nullable width cannot be null');
        }
        
        $this->container['width'] = $width;
        return $this;
    }
}
