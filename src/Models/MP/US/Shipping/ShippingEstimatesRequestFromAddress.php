<?php

/**
 * ShippingEstimatesRequestFromAddress
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */

/**
 * Ship With Walmart
 *
 * This class is auto-generated by the OpenAPI generator v7.12.0 (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

namespace Walmart\Models\MP\US\Shipping;

use Walmart\Models\BaseModel;

/**
 * ShippingEstimatesRequestFromAddress Class Doc Comment
 *
 * @category Class

 * @package  Walmart
 * @author   Jesse Evers
 * @link     https://highsidelabs.co
 * @email    jesse@highsidelabs.co
 */
class ShippingEstimatesRequestFromAddress extends BaseModel
{public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'shippingEstimates_request_fromAddress';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'addressLines' => 'string[]',
        'city' => 'string',
        'countryCode' => 'string',
        'postalCode' => 'string',
        'state' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'addressLines' => null,
        'city' => null,
        'countryCode' => null,
        'postalCode' => null,
        'state' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'addressLines' => false,
		'city' => false,
		'countryCode' => false,
		'postalCode' => false,
		'state' => false
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'addressLines' => 'addressLines',
        'city' => 'city',
        'countryCode' => 'countryCode',
        'postalCode' => 'postalCode',
        'state' => 'state'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'addressLines' => 'setAddressLines',
        'city' => 'setCity',
        'countryCode' => 'setCountryCode',
        'postalCode' => 'setPostalCode',
        'state' => 'setState'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'addressLines' => 'getAddressLines',
        'city' => 'getCity',
        'countryCode' => 'getCountryCode',
        'postalCode' => 'getPostalCode',
        'state' => 'getState'
    ];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('addressLines', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('countryCode', $data ?? [], null);
        $this->setIfExists('postalCode', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        
        return $invalidProperties;
    }

    /**
     * Gets addressLines
     *
     * @return string[]|null
    
     */
    public function getAddressLines()
    {
        return $this->container['addressLines'];
    }

    /**
     * Sets addressLines
     *
     * @param string[]|null $addressLines addressLines
     *
     * @return self
    
     */
    public function setAddressLines($addressLines)
    {
        if (is_null($addressLines)) {
            throw new \InvalidArgumentException('non-nullable addressLines cannot be null');
        }
        
        $this->container['addressLines'] = $addressLines;
        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
    
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city city
     *
     * @return self
    
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }
        
        $this->container['city'] = $city;
        return $this;
    }

    /**
     * Gets countryCode
     *
     * @return string|null
    
     */
    public function getCountryCode()
    {
        return $this->container['countryCode'];
    }

    /**
     * Sets countryCode
     *
     * @param string|null $countryCode countryCode
     *
     * @return self
    
     */
    public function setCountryCode($countryCode)
    {
        if (is_null($countryCode)) {
            throw new \InvalidArgumentException('non-nullable countryCode cannot be null');
        }
        
        $this->container['countryCode'] = $countryCode;
        return $this;
    }

    /**
     * Gets postalCode
     *
     * @return string|null
    
     */
    public function getPostalCode()
    {
        return $this->container['postalCode'];
    }

    /**
     * Sets postalCode
     *
     * @param string|null $postalCode postalCode
     *
     * @return self
    
     */
    public function setPostalCode($postalCode)
    {
        if (is_null($postalCode)) {
            throw new \InvalidArgumentException('non-nullable postalCode cannot be null');
        }
        
        $this->container['postalCode'] = $postalCode;
        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
    
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state state
     *
     * @return self
    
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        
        $this->container['state'] = $state;
        return $this;
    }
}
